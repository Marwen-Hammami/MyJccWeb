<!-- HTML code -->
<table>
	<tr>
		<th>Actions</th>
		<th>Image</th>
	</tr>
	<tr>
		<td>
			{# choisir image #}
			<input type="file" id="image-input"><br/>
			{# sliders de la hauteur et la largeur de l'image #}
			<div style="text-align: right;">
				<label for="width-slider" id="width-label">Largeur: 1280px</label>
				<input type="range" id="width-slider" min="10" max="2560" step="1" value="1280">
			</div>
			<div style="text-align: right;">
				<label for="height-slider" id="height-label">Hauteur: 720px</label>
				<input type="range" id="height-slider" min="10" max="1440" step="1" value="720">
			</div>
			{# choisir extention de l iamge #}
			<div>
				<p>Merci de choisir l'extention pour l'exportation:</p>
				<input type="radio" id="png-radio" name="extension" value="png" checked>
				<label for="png-radio">PNG</label>
				<input type="radio" id="jpg-radio" name="extension" value="jpg">
				<label for="jpg-radio">JPG</label>
				<input type="radio" id="jpeg-radio" name="extension" value="jpeg">
				<label for="jpeg-radio">JPEG</label>
				<input type="radio" id="webp-radio" name="extension" value="webp">
				<label for="webp-radio">WebP</label>
			</div><br/>
			<button id="download-btn">Exporter L'image</button>
		</td>
		<td>
			<img id="image-preview">
		</td>
	</tr>
</table>


<!-- JavaScript code -->
<script>
	// récupération des éléments grace a leurs id
const input = document.getElementById('image-input');
const preview = document.getElementById('image-preview');
const downloadBtn = document.getElementById('download-btn');
const radioGroup = document.getElementsByName('extension');
const widthSlider = document.getElementById('width-slider');
const heightSlider = document.getElementById('height-slider');
const heightLabel = document.getElementById('height-label');
const widthLabel = document.getElementById('width-label');

input.addEventListener('change', () => {
const file = input.files[0];
const reader = new FileReader();

reader.addEventListener('load', () => {
preview.src = reader.result;
downloadBtn.href = reader.result;
downloadBtn.download = file.name;
// changer largeur et hauteur du slider avec celle de l ' image
heightSlider.value = 200;
heightLabel.innerText = `Hauteur: ${
heightSlider.value
}px`;
widthSlider.value = 200;
widthLabel.innerText = `Largeur: ${
widthSlider.value
}px`;
});

reader.readAsDataURL(file);
});

// Bouton de Téléchargement de l'image listener
downloadBtn.addEventListener('click', (event) => {
event.preventDefault();
const downloadLink = document.createElement('a');
const canvas = document.createElement('canvas');
const context = canvas.getContext('2d');
const img = new Image();
img.src = downloadBtn.href;
img.onload = function () {
canvas.width = widthSlider.value; // Appliquer la nouvelle largeur de l'image
canvas.height = heightSlider.value; // Appliquer la nouvelle hauteur de l'image
context.drawImage(img, 0, 0, canvas.width, canvas.height); // Draw the image onto the canvas at the new size
downloadLink.href = canvas.toDataURL(`image/${
getSelectedExtension()
}`); // Convert the canvas to a data URL with the selected extension
downloadLink.download = downloadBtn.download.replace(/\.[^/.]+$/, `.${
getSelectedExtension()
}`); // Update the download file name with the selected extension
downloadLink.click(); // Trigger the download link
};
});

// Vérifier quelle est l'extention de fichier selectionnée
function getSelectedExtension() {
for (let i = 0; i < radioGroup.length; i++) {
if (radioGroup[i].checked) {
return radioGroup[i].value;
}
}
}

// Listener sur le slider qui permet de modifier la largeur de l'image
widthSlider.addEventListener('input', () => {
widthLabel.innerText = `Largeur: ${
widthSlider.value
}px`;
});

// Listener sur le slider qui permet de modifier la hauteur de l'image
heightSlider.addEventListener('input', () => {
heightLabel.innerText = `Hauteur: ${
heightSlider.value
}px`;
});
</script>